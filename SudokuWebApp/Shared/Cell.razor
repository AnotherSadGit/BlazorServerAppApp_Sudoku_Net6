@using Library = SudokuClassLibrary
@inject ILogger<Cell> Logger

<div class="cell-container @CellBackgroundClass">
  <table class="possiblevalues-table">
      <tr>
          <td class=@GetPossibleValueClass(1)>1</td>
          <td class=@GetPossibleValueClass(2)>2</td>
          <td class=@GetPossibleValueClass(3)>3</td>
      </tr>
      <tr>
          <td class=@GetPossibleValueClass(4)>4</td>
          <td class=@GetPossibleValueClass(5)>5</td>
          <td class=@GetPossibleValueClass(6)>6</td>
      </tr>
      <tr>
          <td class=@GetPossibleValueClass(7)>7</td>
          <td class=@GetPossibleValueClass(8)>8</td>
          <td class=@GetPossibleValueClass(9)>9</td>
      </tr>
  </table>

  <span class="@ValueClass show" @onclick=@ShowInputBox>@CellValue</span>

  <form>
    <input type="text" id="newvalue" name="newvalue" 
        class=@InputBoxClass @ref=InputBox @bind="CellValue" @onblur=@HideInputBox />
  </form>
</div>

@code {
    [Parameter()]
    public GameState? GameState { get; set; }

    [Parameter()]
    public int CellRow { get; set; } = 0;

    [Parameter()]
    public int CellColumn { get; set; } = 0;

    [Parameter]
    public EventCallback<string> OnValueError { get; set; }

    private Library.Cell? _cellState;
    private Library.Cell? CellState
    {
        get
        {
            //Logger.LogDebug("Getting CellState for grid cell [{CellRow}, {CellColumn}]...",
            //    CellRow, CellColumn);
            if (_cellState == null)
            {
                if (GameState == null || GameState.GameGrid == null)
                {
                    Logger.LogDebug("CellState and grid are null.");
                    _cellState = null;
                }
                else
                {
                    Logger.LogDebug("CellState is null: Setting it to grid cell [{CellRow}, {CellColumn}]",
                        CellRow, CellColumn);
                    _cellState = GameState.GameGrid.Cells[CellRow, CellColumn];
                }
            }

            Logger.LogDebug($"Getting CellState for grid cell [{CellRow}, {CellColumn}]: {(_cellState == null ? "null" : "reference")} returned.");
            return _cellState;
        }
    }

    private GameStatus _gameStatus => (GameState?.Status ?? GameStatus.Unknown);

    private string CellBackgroundClass
    {
        get
        {
            Logger.LogDebug("Getting CellBackgroundClass...");

            if ((GameState?.HighlightSinglePossibleValue ?? false)
                && (CellState?.HasSinglePossibleValue ?? false) 
                && !CellState.HasValueSet)
            {
                return "cellbackground-single-possiblevalue";
            }

            int parentSquareIndex = CellState?.GetParentSquareIndex() ?? -1;

            if (parentSquareIndex == -1)
            {
                return "cellbackground-default";
            }
#pragma warning disable CS8602 // Dereference of a possibly null reference.
            if (CellState.IsOnKillerDiagonal())
            {
                return "cellbackground-diagonal";
            }
#pragma warning restore CS8602 // Dereference of a possibly null reference.

            bool isEvenSquare = (parentSquareIndex % 2 == 0);

            if (isEvenSquare)
            {
                return "cellbackground-evensquare";
            }

            if (GameState?.GameIsComplete ?? false)
            {
                // Will only apply to odd-numbered squares.
                return "cellbackground-game-completed";
            }

            return "cellbackground-oddsquare";
        }
    }

    private ElementReference InputBox;

    private bool InputBoxIsVisible { get; set; } = false;

    private string InputBoxClass => InputBoxIsVisible ? "cell-newvalue show" : "cell-newvalue hide";

    private string ValueClass => CellState?.IsInitialValue ?? true ? "cell-value-initial" : "cell-value-game";

    private int? CellValue
    {
        get
        {
            Logger.LogDebug("Getting cell [{CellRow}, {CellColumn}] value...", CellRow, CellColumn);
            return CellState?.GetValue();
        }
        set
        {
            Logger.LogDebug("Setting cell [{CellRow}, {CellColumn}] value...", CellRow, CellColumn);
            if (CellState == null)
            {
                Logger.LogDebug("Setting cell [{CellRow}, {CellColumn}] value: CellState not set.", 
                    CellRow, CellColumn);
                return;
            }

            // Initial values are read-only during game.
            if (_gameStatus != GameStatus.Initial && _gameStatus != GameStatus.Setup
                && CellState.IsInitialValue)
            {
                Logger.LogDebug("Cannot change value for cell [{CellRow}, {CellColumn}]: Cell has initial value and game is under way.", 
                    CellRow, CellColumn);
                return;
            }

            if (!CellState.IsValidValue(value, out string? errorMessage))
            {
                Logger.LogDebug("Cannot set value for cell [{CellRow}, {CellColumn}]: {value} is invalid for this cell.",
                    CellRow, CellColumn, value);
                OnValueError.InvokeAsync(errorMessage);
                return;
            }

            int? previousValue = CellState.GetValue();

            if (value == previousValue)
            {
                Logger.LogDebug("Setting cell [{CellRow}, {CellColumn}] value: {value} has not changed.",
                    CellRow, CellColumn, value);
                return;
            }

            if (_gameStatus == GameStatus.Initial || _gameStatus == GameStatus.Setup)
            {
                Logger.LogDebug("Setting cell [{CellRow}, {CellColumn}] initial value to {value}.",
                    CellRow, CellColumn, value);
                CellState.SetInitialValue(value);
            }
            else
            {
                Logger.LogDebug("Setting cell [{CellRow}, {CellColumn}] value to {value}.",
                    CellRow, CellColumn, value);
                CellState.SetGameValue(value);
            }
        }
    }

    private List<Func<Task>> _asyncActionsToRunAfterRender = new List<Func<Task>>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogDebug("Cell [{CellRow}, {CellColumn}] OnAfterRenderAsync called...",
            CellRow, CellColumn);

        Logger.LogDebug($"Cell [{CellRow}, {CellColumn}] OnAfterRenderAsync: Running {_asyncActionsToRunAfterRender.Count} after render actions...");
        foreach (var asyncActionToRun in _asyncActionsToRunAfterRender.ToList())
        {
            await asyncActionToRun();
        }
        _asyncActionsToRunAfterRender.Clear();

        Logger.LogDebug("Cell [{CellRow}, {CellColumn}] OnAfterRenderAsync: Calling base method.",
            CellRow, CellColumn);
        await base.OnAfterRenderAsync(firstRender);
    }

    private string GetPossibleValueClass(int possibleValue)
    {
        string showClass = "show";
        string hideClass = "hide";

        if (CellState == null)
        {
            return showClass;
        }

        if (CellState.HasValueSet || (!GameState?.ShowPossibleValues ?? false))
        {
            return hideClass;
        }

        bool isPossible = CellState?.GetPossibleValuesDictionary()?[possibleValue] ?? true;
        string pvClass = isPossible? showClass : hideClass;
        return pvClass;
    }

    private void ShowInputBox()
    {
        Logger.LogDebug("Showing input box for cell [{CellRow}, {CellColumn}]...",
            CellRow, CellColumn);
        if (CellState == null)
        {
            Logger.LogDebug("Cannot show input box for cell [{CellRow}, {CellColumn}]: CellState not set.",
                CellRow, CellColumn);
            return;
        }

        // Initial values are read-only during game.
        if (_gameStatus != GameStatus.Initial && _gameStatus != GameStatus.Setup
            && CellState.IsInitialValue)
        {
            Logger.LogDebug("Cannot show input box for cell [{CellRow}, {CellColumn}]: Cell has an initial value which cannot be changed during game play.",
                CellRow, CellColumn);
            return;
        }
        InputBoxIsVisible = true;

        Logger.LogDebug("Showing input box for cell [{CellRow}, {CellColumn}]: Action to set focus to input box added to after render actions.",
                CellRow, CellColumn);
        _asyncActionsToRunAfterRender.Add(() => InputBox.FocusAsync().AsTask());
    }

    private void HideInputBox()
    {
        Logger.LogDebug("Hiding input box for cell [{CellRow}, {CellColumn}]...",
                CellRow, CellColumn);

        InputBoxIsVisible = false;
    }
}
