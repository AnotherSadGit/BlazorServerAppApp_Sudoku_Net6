@using Library = SudokuClassLibrary

<div class="cell-container @CellBackgroundClass">
  <table class="possiblevalues-table">
      <tr>
          <td class=@GetPossibleValueClass(1)>1</td>
          <td class=@GetPossibleValueClass(2)>2</td>
          <td class=@GetPossibleValueClass(3)>3</td>
      </tr>
      <tr>
          <td class=@GetPossibleValueClass(4)>4</td>
          <td class=@GetPossibleValueClass(5)>5</td>
          <td class=@GetPossibleValueClass(6)>6</td>
      </tr>
      <tr>
          <td class=@GetPossibleValueClass(7)>7</td>
          <td class=@GetPossibleValueClass(8)>8</td>
          <td class=@GetPossibleValueClass(9)>9</td>
      </tr>
  </table>

  <span class="@ValueClass show" @onclick=@ShowInputBox>@CellValue</span>

  <form>
    <input type="text" id="newvalue" name="newvalue" 
        class=@InputBoxClass @ref=InputBox @bind="CellValue" @onblur=@HideInputBox />
  </form>
</div>

@code {
    [Parameter()]
    public GameState? GameState { get; set; }

    [Parameter()]
    public int CellRow { get; set; } = 0;

    [Parameter()]
    public int CellColumn { get; set; } = 0;

    [Parameter] 
    public EventCallback<string> OnValueError { get; set; }

    private Library.Cell? _cellState;
    private Library.Cell? CellState
    {
        get
        {
            if (_cellState == null)
            {
                if (GameState == null || GameState.GameGrid == null)
                {
                    _cellState = null;
                }
                else
                {
                    _cellState = GameState.GameGrid.Cells[CellRow, CellColumn];
                }
            }
            return _cellState;
        }
    }

    private string CellBackgroundClass
    {
        get
        {
            if ((CellState?.HasSinglePossibleValue ?? false) && !CellState.HasValueSet)
            {
                return "cellbackground-single-possiblevalue";
            }

            int parentSquareIndex = CellState?.GetParentSquareIndex() ?? -1;

            if (parentSquareIndex == -1)
            {
                return "cellbackground-default";
            }
#pragma warning disable CS8602 // Dereference of a possibly null reference.
            if (CellState.IsOnKillerDiagonal())
            {
                return "cellbackground-diagonal";
            }
#pragma warning restore CS8602 // Dereference of a possibly null reference.

            bool isEvenSquare = (parentSquareIndex % 2 == 0);

            if (isEvenSquare)
            {
                return "cellbackground-evensquare";
            }

            return "cellbackground-oddsquare";
        }
    }

    private ElementReference InputBox;

    private bool InputBoxIsVisible { get; set; } = false;

    private string InputBoxClass => InputBoxIsVisible ? "cell-newvalue show" : "cell-newvalue hide";

    private string ValueClass => CellState?.IsInitialValue ?? true ? "cell-value-intital" : "cell-value-userinput";

    private int? CellValue
    {
        get
        {
            return CellState?.Value;
        }
        set
        {
            if (CellState == null)
            {
                return;
            }

            if (!CellState.IsValidValue(value, out string? errorMessage))
            {
                OnValueError.InvokeAsync(errorMessage);
                return;
            }

            int? previousValue = CellState.Value;

            if ((GameState?.Status ?? GameStatus.Unknown) == GameStatus.Setup)
            {
                CellState.SetInitialValue(value);
            }
            else
            {
                CellState.Value = value;
            }

            if (value != previousValue)
            {
                GameState?.RequestRefresh();
            }
        }
    }

    private List<Func<Task>> _asyncActionsToRunAfterRender = new List<Func<Task>>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (var asyncActionToRun in _asyncActionsToRunAfterRender)
        {
            await asyncActionToRun();
        }
        _asyncActionsToRunAfterRender.Clear();

        await base.OnAfterRenderAsync(firstRender);
    }

    private string GetPossibleValueClass(int possibleValue)
    {
        string showClass = "show";
        string hideClass = "hide";

        if (CellState == null)
        {
            return showClass;
        }

        if (CellState.HasValueSet)
        {
            return hideClass;
        }

        bool isPossible = CellState?.GetPossibleValuesDictionary()?[possibleValue] ?? true;
        string pvClass = isPossible? showClass : hideClass;
        return pvClass;
    }

    private void ShowInputBox()
    {
        InputBoxIsVisible = true;
        _asyncActionsToRunAfterRender.Add(() => InputBox.FocusAsync().AsTask());
    }

    private void HideInputBox()
    {
        InputBoxIsVisible = false;
    }
}
