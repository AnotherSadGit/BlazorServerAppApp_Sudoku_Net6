@page "/test"
@inject IJSRuntime JS
@inject ILogger<Index> Logger

<PageTitle>Test</PageTitle>

<h3>Test</h3>

<div>
    <span class="timer-text">Time:</span>
    <span id="timer" class="timer-text">00:00:00.00</span>
</div>

<div>
    <button class="btn btn-success" @onclick="StartJsTimerAsync">Start timer</button>
    <button class="btn btn-success" @onclick="PauseJsTimerAsync">Pause timer</button>
    <button class="btn btn-success" @onclick="ResumeJsTimerAsync">Resume timer</button>
    <button class="btn btn-success" @onclick="RestartJsTimerAsync">Restart timer</button>
    <button class="btn btn-success" @onclick="StopJsTimerAsync">Stop timer</button>
    <button class="btn btn-success" @onclick="ClearJsTimerAsync">Clear timer</button>
</div>

@code { 

    private async Task StartJsTimerAsync()
    {
        Logger.LogDebug("Test StartJsTimerAsync executing...");
        await JS.InvokeVoidAsync("startTimer");
    }

    private async Task PauseJsTimerAsync()
    {
        Logger.LogDebug("Test PauseJsTimerAsync executing...");
        await JS.InvokeVoidAsync("pauseTimer");
    }

    private async Task ResumeJsTimerAsync()
    {
        Logger.LogDebug("Test ResumeJsTimerAsync executing...");
        await JS.InvokeVoidAsync("resumeTimer");
    }

    private async Task StopJsTimerAsync()
    {
        Logger.LogDebug("Test StopJsTimerAsync executing...");
        await JS.InvokeVoidAsync("stopTimer");
    }

    private async Task ClearJsTimerAsync()
    {
        Logger.LogDebug("Test ClearJsTimerAsync executing...");
        await JS.InvokeVoidAsync("clearTimer");
    }

    private async Task RestartJsTimerAsync()
    {
        Logger.LogDebug("Test RestartJsTimerAsync executing...");
        await JS.InvokeVoidAsync("restartTimer");
    }
}
