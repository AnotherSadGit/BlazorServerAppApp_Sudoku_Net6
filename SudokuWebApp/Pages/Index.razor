@page "/"
@using SudokuClassLibrary
@inject GameState GameState
@inject IJSRuntime JS
@inject ILogger<Index> Logger

<PageTitle>Sudoku Game</PageTitle>

<div class="main">
   
    <div class="game-title"><h1>@GameTitle</h1></div>

    @if (GameState == null)
    {
        <p>Loading game board ...</p>
    }
    else
    {   
        <div>
            <span class="timer-text">Time:</span>
            <span id="timer" class="timer-text">00:00:00.00</span>
        </div>

        <div class="game-container">
            <div class="game-column">
                <table>
                    @for (int row = 0; row <= 8; row++)
                    {
                        <tr>
                            @for (int column = 0; column <= 8; column++)
                            {
                                <td class="grid">
                                    <Cell
                                        GameState="GameState"
                                        CellRow="@row"
                                        CellColumn="@column"
                                        OnValueError=@ShowError />
                                </td>
                            }
                        </tr>
                    }
                </table>

                @if (AreYouSureDialogIsVisible)
                {
                    <TwoButtonDialog
                    Type="DialogType.AreYouSure"
                    Message=@DialogMessage
                    OnResult="HandleAreYouSureDialogResult" />
                }

                @if (ErrorDialogIsVisible)
                {
                    <SingleButtonDialog
                        Type="DialogType.Error"
                        Message=@ErrorMessage
                        OnClose="CloseError" />
                }

                @if (CongratulationsDialogIsVisible)
                {
                    <SingleButtonDialog
                        Type="DialogType.Congratulations"
                        Message="You've completed the game!"
                        OnClose="CloseCongratulations" />
                }

                @if (IsButtonGroupVisible(ButtonGroup.Setup))
                {
                    <div class="page-buttons-multiple">
                        <button class="btn btn-danger" 
                            disabled=@IsButtonDisabled(Button.ClearGrid)
                            @onclick="@ClearGridAsync">Clear game grid</button>
                        <button class="btn btn-success" 
                            disabled=@IsButtonDisabled(Button.StartGame)
                            @onclick="StartGameAsync">Start game</button>
                    </div>
                }
                @if (IsButtonGroupVisible(ButtonGroup.Game))
                {
                    <div class="page-buttons-multiple">
                        <button class="@PauseContinueButtonClass pause-continue-button" 
                                disabled=@IsButtonDisabled(Button.PauseContinue)
                                @onclick="TogglePauseGameAsync">@PauseContinueButtonText</button>
                        <button class="btn btn-warning"  
                                disabled=@IsButtonDisabled(Button.RestartGame)
                                @onclick="@RestartGameAsync">Restart game</button>
                        <button class="btn btn-danger" @onclick="@NewGameAsync">New game</button>
                    </div>
                }
                <div class="page-buttons-multiple">
                        <button class="btn btn-primary" 
                                disabled=@IsButtonDisabled(Button.Undo)
                                @onclick="@UndoChange">&lt; Undo</button>                            
                        <button class="btn btn-primary" 
                                disabled=@IsButtonDisabled(Button.Redo)
                                @onclick="RedoChange">Redo &gt;</button>
                </div>
            </div>

            <div class="game-column">

                <div class="text-panel options-panel">
                    <h2>Options</h2>

                    <p>Tick the checkbox to make this a <strong>Killer Sudoku</strong> game.</p>

                        <div class="options-container">
                        <input type="checkbox" class="checkbox-large" 
                            disabled=@IsKillerSudokuDisabled @bind="GameState.IsKillerSudoku" />
                        <label>Is Killer Sudoku</label>
                    </div>

                    <p/>
                    <p>The following options can be changed at any time, during setup or during the game.</p>

                    <p>They provide help to make the game easier.  You may find them most useful 
                        in more difficult games, and that they make easier games too trivial.</p>

                    <div class="options-container">
                        <input type="checkbox" class="checkbox-large" 
                        disabled=@AreOptionsDisabled @bind="GameState.ShowPossibleValues" />
                        <label>Show possible values for each square</label>
                        <br/>
                        <input type="checkbox" class="checkbox-large" 
                        disabled=@AreOptionsDisabled @bind="GameState.HighlightSinglePossibleValue" />
                        <label>Highlight squares with only one possible value</label>
                    </div>
                </div>

                <p>Current game state: @GameState.Status</p>
                <p>Previous game state: @GameState.PreviousStatus</p>
                <p>Dialog button pressed: @DialogResult</p>

                <p/>
                <h2>Instructions</h2>

                    <p>See the <a href="help">Sudoku Help</a> page.</p>
            </div>            
        </div>
    }

</div>

@code
{
    #region Lifecycle Events **********************************************************************

    protected override void OnInitialized()
    {
        Logger.LogDebug("Initializing Index page...");
        GameState.RefreshRequested += RefreshMe;
        GameState.StatusChanged += GameState_StatusChanged;
    }

    private List<Func<Task>> _asyncActionsToRunAfterRender = new List<Func<Task>>();
    private Queue<string> _jsFunctionsToExecute = new();

    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        Logger.LogDebug("Executing Index OnAfterRenderAsync...");

        Logger.LogDebug($"Index OnAfterRenderAsync: Running {_asyncActionsToRunAfterRender.Count} after render actions...");
        while (_jsFunctionsToExecute.TryDequeue(out string? jsFunctionName))
        {
            if (!string.IsNullOrWhiteSpace(jsFunctionName))
            {
                await SafeJsVoidCall(jsFunctionName);
            }
        }

        foreach (var asyncActionToRun in _asyncActionsToRunAfterRender.ToList())
        {
            await asyncActionToRun();
        }
        _asyncActionsToRunAfterRender.Clear();

        Logger.LogDebug("Index OnAfterRenderAsync: Calling base method.");
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Logger.LogDebug("Disposing Index page...");

        GameState.RefreshRequested -= RefreshMe;
        GameState.StatusChanged -= GameState_StatusChanged;
    }

    private async void RefreshMe()
    {
        Logger.LogDebug("Executing Index RefreshMe...");
        await InvokeAsync(() => StateHasChanged());

        if (GameState.GameIsComplete)
        {
            Logger.LogDebug("Index RefreshMe: Game is complete.");
            ShowCongratulations();
        }
    }

    private async void GameState_StatusChanged(object? sender, GameStatusChangedEventArgs eventArgs)
    {
        Logger.LogDebug("Index GameState_StatusChanged event handler executing...");

        GameStatus currentStatus = eventArgs.CurrentStatus;
        Logger.LogDebug("Index GameState_StatusChanged: Current game status: {currentStatus}.",
            currentStatus);

        switch(currentStatus)
        {
            case GameStatus.Initial:
                await OnInitialStatusSet();
                break;
            case GameStatus.GameStart:
                await OnGameStartStatusSet();
                break;
            case GameStatus.Paused:
                await OnPausedStatusSet();
                break;
            case GameStatus.Running:
                await OnRunningStatusSet();
                break;
            case GameStatus.Completed:
                await OnCompletedStatusSet();
                break;
            case GameStatus.ModalDialogOpen:
                await OnModalDialogOpenSet();
                break;
        }

        RefreshMe();
    }

    private async Task OnInitialStatusSet()
    {
        Logger.LogDebug("Index OnInitialStatusSet executing...");
        await ClearJsTimerAndLeaveStoppedAsync();
        //EnqueueJsFunctionNameToExecute("clearTimer");
    }

    private async Task OnGameStartStatusSet()
    {
        Logger.LogDebug("Index OnGameStartStatusSet executing...");
        //await ClearAndRestartJsTimerAsync();
        EnqueueJsFunctionNameToExecute("restartTimer");
    }

    private async Task OnPausedStatusSet()
    {
        Logger.LogDebug("Index OnPausedStatusSet executing...");
        //await PauseJsTimerAsync();
        EnqueueJsFunctionNameToExecute("pauseTimer");
    }

    private async Task OnRunningStatusSet()
    {
        Logger.LogDebug("Index OnRunningStatusSet executing...");
        // Won't cause a problem if timer already running, but will start running again if 
        // previously paused.
        //await ResumeJsTimerAsync();
        EnqueueJsFunctionNameToExecute("resumeTimer");
    }

    private async Task OnCompletedStatusSet()
    {
        Logger.LogDebug("Index OnCompletedStatusSet executing...");
        await StopJsTimerAsync();
        //EnqueueJsFunctionNameToExecute("stopTimer");
    }

    private async Task OnModalDialogOpenSet()
    {
        Logger.LogDebug("Index OnModalDialogOpenSet executing...");
        //await PauseJsTimerAsync();
        EnqueueJsFunctionNameToExecute("pauseTimer");
    }

    #endregion

    #region Miscellaneous setup *******************************************************************

    private string GameTitle => (GameState?.IsKillerSudoku ?? false) ? "Killer Sudoku!" : "Sudoku!";
    private bool IsKillerSudokuDisabled => (GameState.Status != GameStatus.Initial
                                        && GameState.Status != GameStatus.Setup);
    private bool AreOptionsDisabled => (GameState.Status == GameStatus.Completed);

    #endregion

    #region Button setup **************************************************************************

    private string _pauseContinueButtonText = "Pause";
    private string PauseContinueButtonText
    {
        get
        {
            return _pauseContinueButtonText;
        }
    }

    private string _pauseContinueButtonClass = "btn btn-info";
    private string PauseContinueButtonClass
    {
        get
        {
            return _pauseContinueButtonClass;
        }
    }

    private bool IsButtonDisabled(Button button)
    {
        Logger.LogDebug("Index IsButtonDisabled executing for button {button}...", button);

        if (button == Button.Undo)
        {
            return !GameState.History.CanUndo;
        }
        if (button == Button.Redo)
        {
            return !GameState.History.CanRedo;
        }

        switch (GameState.Status)
        {
            case GameStatus.Initial:
                return (button != Button.ClearGrid);
            case GameStatus.Setup:
                return (button != Button.ClearGrid && button != Button.StartGame);
            case GameStatus.Running:
            case GameStatus.Paused:
                return (button != Button.PauseContinue && button != Button.RestartGame 
                    && button != Button.NewGame);
            case GameStatus.Completed:
                return (button != Button.RestartGame && button != Button.NewGame);
            case GameStatus.ModalDialogOpen:
                return true;
            default:
                return true;
        }
    }

    private bool IsButtonGroupVisible(ButtonGroup buttonGroup)
    {
        Logger.LogDebug("Index IsButtonGroupVisible executing for button group {buttonGroup}...", buttonGroup);

        switch (GameState.Status)
        {
            case GameStatus.Initial:
            case GameStatus.Setup:
                return (buttonGroup != ButtonGroup.Game);
            case GameStatus.GameStart:
            case GameStatus.Running:
            case GameStatus.Paused:
            case GameStatus.Completed:
            case GameStatus.ModalDialogOpen:
                return (buttonGroup != ButtonGroup.Setup);
            default:
                return true;
        }
    }

    #endregion

    #region Button events *************************************************************************

    private void UndoChange()
    {
        Logger.LogDebug("Index UndoChange executing...");
        GameState.OnUndo();
    }

    private void RedoChange()
    {
        Logger.LogDebug("Index RedoChange executing...");
        GameState.OnRedo();
    }

    private async Task StartGameAsync()
    {
        Logger.LogDebug("Index StartGame executing...");
        await StartJsTimerAsync();
        GameState.Status = GameStatus.GameStart;
    }

    private async Task TogglePauseGameAsync()
    {
        Logger.LogDebug("Index TogglePauseGame executing...");

        if (GameState.Status == GameStatus.GameStart || GameState.Status == GameStatus.Running)
        {
            Logger.LogDebug("Index TogglePauseGame: Pausing game...");
            //await PauseJsTimerAsync();
            //_jsFunctionsToExecute.Enqueue("pauseTimer");
            EnqueueJsFunctionNameToExecute("pauseTimer");
            _pauseContinueButtonText = "Continue";
            _pauseContinueButtonClass = "btn btn-primary";
            PauseGame();
        }
        else if (GameState.Status == GameStatus.Paused)
        {
            Logger.LogDebug("Index TogglePauseGame: Resuming game...");
            //await ResumeJsTimerAsync();
            EnqueueJsFunctionNameToExecute("resumeTimer");
            _pauseContinueButtonText = "Pause";
            _pauseContinueButtonClass = "btn btn-info";
            ContinueGame();
        }
    }

    private void PauseGame()
    {
        Logger.LogDebug("Index PauseGame executing...");
        GameState.Status = GameStatus.Paused;
    }

    private void ContinueGame()
    {
        Logger.LogDebug("Index ContinueGame executing...");
        GameState.ResetToPreviousStatus();
    }

    private async Task ClearGridAsync()
    {
        Logger.LogDebug("Index ClearGridAsync executing...");

        string dialogMessage = "Are you sure you want to clear all initial values?";
        Action actionOnConfirmation = () =>
        {
            GameState.Status = GameStatus.Initial;
        };

        await ActWithConfirmationAsync(dialogMessage, actionOnConfirmation);
    }

    private async Task RestartGameAsync()
    {
        Logger.LogDebug("Index RestartGameAsync executing...");

        string dialogMessage = "Are you sure you want to restart the game?";
        Action actionOnConfirmation = () =>
        {
            EnqueueJsFunctionNameToExecute("restartTimer");
            GameState.Status = GameStatus.GameStart;
        };

        await ActWithConfirmationAsync(dialogMessage, actionOnConfirmation);
    }

    private async Task NewGameAsync()
    {
        Logger.LogDebug("Index NewGameAsync executing...");

        string dialogMessage = "Are you sure you want to cancel this game and start a new one?";
        Action actionOnConfirmation = () =>
        {
            EnqueueJsFunctionNameToExecute("clearTimer");
            GameState.Status = GameStatus.Initial;
        };

        await ActWithConfirmationAsync(dialogMessage, actionOnConfirmation);
    }

    private async Task ActWithConfirmationAsync(string dialogMessage, Action actionOnConfirmation)
    {
        Logger.LogDebug("Index ActWithConfirmationAsync executing...");

        var previousStatus = GameState.Status;

        DialogMessage = dialogMessage;
        DialogResult result = DialogResult.Unknown;

        Logger.LogDebug("Index ActWithConfirmationAsync: Showing Are You Sure dialog...");
        ShowAreYouSureDialog();
        await Utilities.WaitUntil(() => DialogResult != DialogResult.Unknown);
        result = DialogResult;

        Logger.LogDebug("Index ActWithConfirmationAsync: Are You Sure result: {result}.", result);

        if (result == DialogResult.Ok)
        {
            Logger.LogDebug("Index ActWithConfirmationAsync: User confirmed they are sure; performing action...");
            actionOnConfirmation();
        }
        else
        {
            Logger.LogDebug("Index ActWithConfirmationAsync: User cancelled action, resetting to previous game status...");
            // If dialog cancelled return to the previous game state.
            GameState.ResetToPreviousStatus();
        }
    }

    #endregion

    #region Dialog display ************************************************************************

    private bool AreYouSureDialogIsVisible { get; set; } = false;
    private string DialogMessage { get; set; } = "Are you sure?";
    private DialogResult DialogResult { get; set; } = DialogResult.Unknown;

    private bool ErrorDialogIsVisible { get; set; } = false;
    private string ErrorMessage { get; set; } = "An error occurred.";

    private bool CongratulationsDialogIsVisible { get; set; } = false;

    private void ShowAreYouSureDialog()
    {
        Logger.LogDebug("Index ShowAreYouSureDialog executing...");
        GameState.Status = GameStatus.ModalDialogOpen;
        AreYouSureDialogIsVisible = true;
        DialogResult = DialogResult.Unknown;
    }

    private void HandleAreYouSureDialogResult(DialogResult result)
    {
        Logger.LogDebug("Index HandleAreYouSureDialogResult: Are You Sure result: {result}.", result);
        AreYouSureDialogIsVisible = false;
        DialogResult = result;
    }

    private void ShowError(string errorMessage)
    {
        Logger.LogDebug("Index ShowError executing...");
        GameState.Status = GameStatus.ModalDialogOpen;
        ErrorMessage = errorMessage;
        ErrorDialogIsVisible = true;
    }

    private void CloseError()
    {
        Logger.LogDebug("Index CloseError executing: Resetting to previous game status...");
        ErrorDialogIsVisible = false;
        ErrorMessage = "An error occurred.";
        GameState.ResetToPreviousStatus();
    }

    private void ShowCongratulations()
    {
        Logger.LogDebug("Index ShowCongratulations executing...");
        CongratulationsDialogIsVisible = true;
    }

    private void CloseCongratulations()
    {
        Logger.LogDebug("Index CloseCongratulations executing...");
        CongratulationsDialogIsVisible = false;
    }

    #endregion

    #region Control timer *************************************************************************

    private async Task StartJsTimerAsync()
    {
        Logger.LogDebug("Index StartJsTimerAsync executing...");
        await SafeJsVoidCall("startTimer");
    }

    private async Task StopJsTimerAsync()
    {
        Logger.LogDebug("Index StopJsTimerAsync executing...");
        await SafeJsVoidCall("stopTimer");
    }

    private async Task PauseJsTimerAsync()
    {
        Logger.LogDebug("Index PauseJsTimerAsync executing...");
        //await SafeJsVoidCall("pauseTimer");
    }

    private async Task ResumeJsTimerAsync()
    {
        Logger.LogDebug("Index ResumeJsTimerAsync executing...");
        //await SafeJsVoidCall("resumeTimer");
    }

    private async Task ClearJsTimerAndLeaveStoppedAsync()
    {
        Logger.LogDebug("Index ClearJsTimerAndLeaveStoppedAsync executing...");
        await SafeJsVoidCall("clearTimer");
    }

    private async Task ClearAndRestartJsTimerAsync()
    {
        Logger.LogDebug("Index ClearAndRestartJsTimerAsync executing...");
        await SafeJsVoidCall("restartTimer");
    }

    #endregion

    private void EnqueueJsFunctionNameToExecute(string? jsFunctionName)
    {
        // Want to debounce: avoid queuing the same function multiple times.
        if (string.IsNullOrWhiteSpace(jsFunctionName)
        || _jsFunctionsToExecute.Contains(jsFunctionName))
        {
            return;
        }
        _jsFunctionsToExecute.Enqueue(jsFunctionName);
    }

    private async Task SafeJsVoidCall(string jsFunctionName)
    {
        Logger.LogDebug("Index SafeJsVoidCall: Attempting to execute JS function {jsFunctionName}...", 
            jsFunctionName);
        try
        {
            await JS.InvokeVoidAsync(jsFunctionName);
            Logger.LogDebug("Index SafeJsVoidCall for {jsFunctionName}: JS function completed.", 
                jsFunctionName);
        }
        catch (InvalidOperationException ex)
        {
            Logger.LogDebug(ex, "Index SafeJsVoidCall for {jsFunctionName}: InvalidOperationException.",
                jsFunctionName);
            //_asyncActionsToRunAfterRender.Add(() => JS.InvokeVoidAsync(jsFunctionName).AsTask());
        }
        catch (JSDisconnectedException ex)
        {
            Logger.LogDebug(ex, "Index SafeJsVoidCall for {jsFunctionName}: JSDisconnectedException.",
                jsFunctionName);
            // Do nothing.
        }
    }
}
